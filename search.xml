<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>线段树</title>
    <url>/blog/2019/10/13/%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
    <content><![CDATA[<p>线段树是一个支持区间修改以及查询的算法，基于二分的优化，让时间大大节省。</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> f(a,b) for(long long i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1e5+5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x7fffffff</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> num[<span class="number">100005</span>]; <span class="comment">//储存原序列</span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segment_tree</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> lf,rt;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> val,tag;</span><br><span class="line">&#125;segtree[<span class="keyword">int</span>(N)&lt;&lt;<span class="number">2</span>]; <span class="comment">//创建一个线段树结构体，因为结构体方便操作</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">l_son</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> p&lt;&lt;<span class="number">1</span>;</span><br><span class="line">&#125;<span class="comment">// 找到p节点的左儿子节点</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">r_son</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;</span><br><span class="line">&#125;<span class="comment">// 找到p节点的右儿子节点</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_up_sum</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	segtree[p].val=segtree[l_son(p)].val+segtree[r_son(p)].val;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;<span class="comment">//由于本模板是求区间和故打的求和</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build_tree</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> o,<span class="keyword">long</span> <span class="keyword">long</span> l,<span class="keyword">long</span> <span class="keyword">long</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	segtree[o].lf=l;</span><br><span class="line">	segtree[o].rt=r;</span><br><span class="line">	<span class="keyword">if</span>(l==r)</span><br><span class="line">	&#123;</span><br><span class="line">		segtree[o].val=num[l];</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	build_tree(l_son(o),l,mid);<span class="comment">//左儿子建立</span></span><br><span class="line">	build_tree(r_son(o),mid+<span class="number">1</span>,r);<span class="comment">//右儿子一样</span></span><br><span class="line">	push_up_sum(o);<span class="comment">//整合子节点的和</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_down_tag</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!segtree[p].tag) <span class="keyword">return</span> ;<span class="comment">//没修改过就不用下放因为效果还是一样的</span></span><br><span class="line">	segtree[l_son(p)].val+=segtree[p].tag*(segtree[l_son(p)].rt-segtree[l_son(p)].lf+<span class="number">1</span>);</span><br><span class="line">	segtree[l_son(p)].tag+=segtree[p].tag;</span><br><span class="line">	segtree[r_son(p)].val+=segtree[p].tag*(segtree[r_son(p)].rt-segtree[r_son(p)].lf+<span class="number">1</span>);</span><br><span class="line">	segtree[r_son(p)].tag+=segtree[p].tag;</span><br><span class="line">	segtree[p].tag=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;<span class="comment">//把tag下放，达到修改的目的但一旦不用了就不用下放了</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> o,<span class="keyword">long</span> <span class="keyword">long</span> l,<span class="keyword">long</span> <span class="keyword">long</span> r,<span class="keyword">long</span> <span class="keyword">long</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l&lt;=segtree[o].lf&amp;&amp;segtree[o].rt&lt;=r)</span><br><span class="line">	&#123;</span><br><span class="line">		segtree[o].val+=(<span class="keyword">long</span> <span class="keyword">long</span>)k*(segtree[o].rt-segtree[o].lf+<span class="number">1</span>);</span><br><span class="line">		segtree[o].tag+=k;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;<span class="comment">//该区间被包含了直接整个区间和加上去就行</span></span><br><span class="line">	push_down_tag(o);</span><br><span class="line">	<span class="keyword">int</span> mid=(segtree[o].lf+segtree[o].rt)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(l&lt;=mid) update(l_son(o),l,r,k);</span><br><span class="line">	<span class="keyword">if</span>(mid&lt;r) update(r_son(o),l,r,k);</span><br><span class="line">	push_up_sum(o);</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> f_=<span class="number">1</span>,x=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">char</span> ch=getchar();</span><br><span class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(ch==<span class="string">'-'</span>)</span><br><span class="line">			f_=<span class="number">-1</span>;</span><br><span class="line">		ch=getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">		ch=getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> x*=f_;</span><br><span class="line">&#125;<span class="comment">//快读</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">ask_sum</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> o,<span class="keyword">long</span> <span class="keyword">long</span> l,<span class="keyword">long</span> <span class="keyword">long</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> summ=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(l&lt;=segtree[o].lf&amp;&amp;segtree[o].rt&lt;=r)</span><br><span class="line">		<span class="keyword">return</span> segtree[o].val;</span><br><span class="line">	push_down_tag(o);</span><br><span class="line">	<span class="keyword">int</span> mid=(segtree[o].lf+segtree[o].rt)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(mid&gt;=l) summ+=ask_sum(l_son(o),l,r);</span><br><span class="line">	<span class="keyword">if</span>(mid&lt;r) summ+=ask_sum(r_son(o),l,r);</span><br><span class="line">	<span class="keyword">return</span> summ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	n=read();</span><br><span class="line">	m=read();</span><br><span class="line">	f(<span class="number">1</span>,n)</span><br><span class="line">		num[i]=read();</span><br><span class="line">	build_tree(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">	f(<span class="number">1</span>,m)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">long</span> <span class="keyword">long</span> k,x,y,change;</span><br><span class="line">		k=read();</span><br><span class="line">		<span class="keyword">if</span>(k==<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			x=read();</span><br><span class="line">			y=read();</span><br><span class="line">			change=read();</span><br><span class="line">			update(<span class="number">1</span>,x,y,change);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(k==<span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			x=read();</span><br><span class="line">			y=read();</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ask_sum(<span class="number">1</span>,x,y));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>初赛复习</title>
    <url>/blog/2019/10/13/%E5%88%9D%E8%B5%9B%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<p>— 我的初赛复习</p>
<a id="more"></a>
<h3 id="错题总结："><a href="#错题总结：" class="headerlink" title="错题总结："></a>错题总结：</h3><p>$\large 1.$程序设计语言划分：</p>
<p>解释语言：</p>
<blockquote>
<p>包含$Vbscript$、$Perl$、$Python$等，其运行模式主要是边解释边执行，效率较低。</p>
</blockquote>
<p>编译语言：</p>
<blockquote>
<p>包含$C$、$C$++、$Delphi$等，编译是指在应用源程序执行之前，就将程序源代码翻译成目标代码(机器语言)，使用比较方便、效率较高。</p>
</blockquote>
<p>$\large 2.$ $NOI$背景：</p>
<p>$\large 1984$年邓小平指出：“计算机的普及要从娃娃做起。”中国计算机学会于$\large 1984$年创办全国青少年计算机程序设计竞赛（简 称：$NOI$）</p>
<p>$\large 3.$关于前缀、中缀、后缀表达式：</p>
<p>前缀表达式的运算符位于与其相关的操作数之前，中缀与后缀同理。</p>
<p>例如：</p>
<blockquote>
<p>$\large (3 + 4) × 5 - 6$ 为中缀表达式</p>
</blockquote>
<blockquote>
<p>$\large - × + 3$  $\large 4$ $\large 5$ $\large 6$ 为前缀表达式</p>
</blockquote>
<blockquote>
<p>$\large 3$ $\large 4$ $\large +$ $\large 5$ $\large ×$ $\large 6$ $\large -$ 为后缀表达式</p>
</blockquote>
<p>$\large 4.$关于先序、中序、后序遍历</p>
<p>对于一棵二叉树，其先序、中序、后序遍历分别遍历的顺序为：</p>
<blockquote>
<p>先序：根左右</p>
</blockquote>
<blockquote>
<p>中序：左根右</p>
</blockquote>
<blockquote>
<p>后序：左右根</p>
</blockquote>
<p>对于一个表达式求其 ——$&gt;$前/中/后缀表达式，例如：</p>
<blockquote>
<p>表达式 $a * (b + c) / d$ </p>
</blockquote>
<p>则我们可以先按照表达式，从前往后建树，如图：<br><img src="https://s2.ax1x.com/2019/10/05/ustLGT.png" alt=""><br>然后我们进行后序遍历，即——$&gt;$左、根、右，得出后缀表达式：</p>
<blockquote>
<p>$a$  $b$  $c$ $+$ $* $ $d$ $/$</p>
</blockquote>
<p>$\large 5.$关于图灵奖：</p>
<p>图灵奖是$ACM$设立的。</p>
<p>目前获得该奖项的华人学者只有姚期智教授一人。</p>
<p>其名称取自计算机科学的先驱、英国科学家艾伦·麦席森·图灵。</p>
<p>它是计算机界最负盛名、最崇高的一个奖项，有“计算机界的诺贝尔奖”<br>之称。</p>
<p>$\large 6.$ 存储容量计量单位</p>
<table>
<thead>
<tr>
<th align="center">计量单位</th>
<th align="center">进制转换</th>
<th align="center">名称/简写</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$bit$</td>
<td align="center">为计量单位的最小单位</td>
<td align="center">我们经常叫它“位”</td>
</tr>
<tr>
<td align="center">$B$</td>
<td align="center">$1B$ = $8bit$</td>
<td align="center">字节</td>
</tr>
<tr>
<td align="center">$KB$</td>
<td align="center">$1KB = 1024B$</td>
<td align="center">千字节</td>
</tr>
<tr>
<td align="center">$MB$</td>
<td align="center">$1MB = 1024KB$</td>
<td align="center">百万字节，简称“兆”</td>
</tr>
<tr>
<td align="center">$GB$</td>
<td align="center">$1GB = 1024MB$</td>
<td align="center">十亿字节，简称“千兆”</td>
</tr>
</tbody></table>
<p>例题：</p>
<blockquote>
<p>分辨率为 $1600 {\times} 900$、$16$ 位色的位图，存储图像信息所需的空间为____</p>
</blockquote>
<p>由于 $16$ 位($bit$)等于 $2B$，则需要空间：</p>
<blockquote>
<p>$1600{\times}900{\times}(16/8)/1024 = 2812.5$  $ KB$</p>
</blockquote>
<p>$\large 7.$排列与组合</p>
<p>排列公式：</p>
<blockquote>
<h2 id="A-m-n-frac-m-m-n"><a href="#A-m-n-frac-m-m-n" class="headerlink" title="$A_{m}^{n} = \frac{m!}{(m-n)!}$"></a>$A_{m}^{n} = \frac{m!}{(m-n)!}$</h2></blockquote>
<p>组合公式：</p>
<blockquote>
<h2 id="C-m-n-frac-m-m-n-n"><a href="#C-m-n-frac-m-m-n-n" class="headerlink" title="$C_{m}^{n} = \frac{m!}{(m-n)!n!}$"></a>$C_{m}^{n} = \frac{m!}{(m-n)!n!}$</h2></blockquote>
<p>简单来说，排列 $\large A_{m}^{n}$ 与组合 $\large C_{m}^{n}$ 的最大区别是排列需要考虑不同顺序的组合对方案数的影响。</p>
<p>我们来看一道例题，这道题比较灵活：</p>
<blockquote>
<p>将 $7$ 个名额分给 $4$ 个不同的班级，允许有的班级没有名额，有多少种不同的分配方案。</p>
</blockquote>
<p>解题思路：</p>
<blockquote>
<p>将题目转化为：“将 $11$ 个名额分给 $4$ 个不同的班级，每个班至少有一个名额，有多少种不同的分配方案。”然后利用插板法的思路，从 $\large 10$ 个间隔中选取 $\large 3$ 个间隔进行插板，这样就可以选出四个区间，不允许不插，即$\large C_{11-1}^{4-1} = C_{10}^{3} = 120$。</p>
</blockquote>
]]></content>
      <tags>
        <tag>初赛</tag>
      </tags>
  </entry>
</search>
